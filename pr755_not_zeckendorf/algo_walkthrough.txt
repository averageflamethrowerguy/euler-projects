for n = 50

fibs = [ 1, 2, 3, 5, 8, 13, 21, 34 ]
fibSums = [ 1, 3, 6, 11, 19, 32, 53, 87 ]

// this I will add to as we go
map = {
number: {largestIndex: combinations possible}
2: {1: 1}
3: {2: 2}
8: {3: 2}
16: {5: 4, 4: 2}
29: {5: 2}
50: {7: 6}
}

largestIndex = (biggest Fib less than n) = index(34) = 7
smallestIndex = (smallest sum greater than n) = index(53) = 6

Chain 1:
    select 34 (index 7)
    50 - 34 = 16
    for n = 16 (recurse)
        largestIndex = index(13) = 5
        smallestIndex = index(19) = 4
        Chain 1:
            select 13 (index 5)
            16 - 13 = 3
            for n = 3 (recurse)
                isAFib = true, so sum += 1

                largestIndex = 1
                smallestIndex = 1
                Chain 1:
                    select 2;
                    isAFib = true, so sum += 1
                    no valid sums underneath index 1; so don't recurse
                    set map, return 1

                set map, return 2
        Chain 2:
            select 8 (index 4)
            16 - 8 = 8
            for n = 8 (this is interesting - largestPossibleIndex = 3 while otherwise it would be 4;
                       this necessitates usage of arrays or other objects within the map;
                       )
                largestIndex = 3
                smallestIndex = 3
                Chain 1:
                    select 5 (index 3)
                    8 - 5 = 3
                    for n = 3
                    ... retrieve from map; return 2

                    set map, return 2

                set map, return 2
(
fibs = [ 1, 2, 3, 5, 8, 13, 21, 34 ]
fibSums = [ 1, 3, 6, 11, 19, 32, 53, 87 ]
)

Chain 2:
    select 21 (index 6)
    50 - 21 = 29
    for n = 29 (recurse)
         largestIndex = 5 // we're constrained because we just used index 6
         smallestIndex = 5

         Chain 1:
             select 13 (index 5)'
             29 - 13 = 16
             for n = 16 (recurse)
                 largestIndex = 4
                 smallestIndex = 4

                 Chain 1:
                    select 8 (index 4)
                    16 - 8 = 8
                    for n = 8 (recurse)
                        largestIndex = 3
                        smallestIndex = 3
                        use 2 from memory

                        set map, return 2
                 set map, return 2
        set map, return 2


we probably just need to check 2-3 different locations in memory